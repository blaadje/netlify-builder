{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yDAImC;AAGnC,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAEtC,kBAAe,yBAAa,CACxB,CACI,aAAqB,EACrB,OAAuB,EACD,EAAE;IACxB,OAAO,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;IAC5C,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;IAEhE,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAA;IAEpC,IAAI,aAAa,CAAC,OAAO,EAAE;QACvB,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;KAC5C;SAAM;QACH,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,IAAI,YAAY,CAAC;QAElE,MAAM,QAAQ,iBACP,EAAE,QAAQ,EAAE,aAAa,CAAC,QAAQ,EAAE,CAC1C,CAAC;QAEF,IAAI,SAAS,qBAEN,CAAC,aAAa,CAAC,QAAQ,IAAI;YAC1B,QAAQ,EAAE,aAAa,CAAC,QAAQ;SACnC,CAAC,CACL,CAAC;QAEF,IAAI,aAAa,CAAC,QAAQ,EAAE;YACxB,SAAS,mCACF,CAAC,aAAa,CAAC,QAAQ,IAAI;gBAC1B,QAAQ,EAAE,aAAa,CAAC,QAAQ;aACnC,CAAC,KACF,QAAQ,EAAE,aAAa,CAAC,QAAQ,GACnC,CAAC;SACL;QAED,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACjB,MAAM,IAAI,KAAK,CACX,+CAA+C,CAClD,CAAC;SACL;QAED,MAAM,QAAQ,GAAG,aAAa,CAAC,QAAQ;YACnC,CAAC,CAAC,oBAAoB,aAAa,CAAC,QAAQ,EAAE;YAC9C,CAAC,CAAC,EAAE,CAAC;QACT,MAAM,WAAW,GAAG,aAAa,CAAC,WAAW;YACzC,CAAC,CAAC,aAAa,CAAC,WAAW;YAC3B,CAAC,CAAC,OAAO,CAAC;QACd,OAAO,CAAC,MAAM,CAAC,IAAI,CACf,gBAAgB,OAAO,CAAC,MAAM,CAAC,OAAO,sBAAsB,aAAa,qBAAqB,WAAW,KAAK,QAAQ,EAAE,CAC3H,CAAC;QAEF,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,cAAc,CACtC;YACI,MAAM,EAAE,WAAW;YACnB,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE;YACrC,aAAa;SAChB,EACD,SAA4B,CAC/B,CAAC;QAEF,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC;QAEvC,IAAI,WAAW,CAAC,OAAO,KAAK,IAAI,EAAE;YAC9B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;YACnD,OAAO;gBACH,KAAK,EAAE,4BAA4B;gBACnC,OAAO,EAAE,KAAK;aACjB,CAAC;SACL;QAED,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;KAC5C;IAED,MAAM,YAAY,GACd,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,aAAa,CAAC,YAAY,CAAC;IAC5D,IAAI,YAAY,KAAK,EAAE,IAAI,YAAY,KAAK,SAAS,EAAE;QACnD,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;QACrD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;KAC7B;IAED,IAAI,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,aAAa,CAAC,MAAM,CAAC;IAChE,IAAI,MAAM,KAAK,EAAE,IAAI,MAAM,KAAK,SAAS,EAAE;QACvC,kDAAkD;QAClD,IAAI,aAAa,CAAC,MAAM,KAAK,KAAK,EAAE;YAChC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;YACxD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;SAC7B;KACJ;IAED,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,YAAY,EAAE;QACxC,SAAS,EAAE,mBAAmB;QAC9B,MAAM,EAAE,OAAO;QACf,IAAI,EAAE,iBAAiB;QACvB,UAAU,EAAE,SAAS;QACrB,YAAY,EAAE,EAAE;KACnB,CAAC,CAAC;IAEH,+BAA+B;IAC/B,IAAI,IAAI,CAAC;IACT,IAAI;QACA,+BAA+B;QAC/B,IAAI,MAAM,EAAE;YACR,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;SACpD;KACJ;IAAC,OAAO,CAAC,EAAE;QACR,QAAQ,CAAC,CAAC,MAAM,EAAE;YACd,KAAK,GAAG;gBACJ,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,MAAM,eAAe,CAAC,CAAC;gBACvD,iDAAiD;gBACjD,IAAI,aAAa,CAAC,MAAM,KAAK,IAAI,EAAE;oBAC/B,OAAO;wBACH,OAAO,EAAE,KAAK;qBACjB,CAAC;iBACL;gBACD,MAAM;YACV,KAAK,GAAG;gBACJ,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBACvD,OAAO;oBACH,OAAO,EAAE,KAAK;iBACjB,CAAC;YACN;gBACI,uBAAuB;gBACvB,OAAO;oBACH,KAAK,EAAE,CAAC,CAAC,OAAO;oBAChB,OAAO,EAAE,KAAK;iBACjB,CAAC;SACT;KACJ;IAED,uBAAuB;IACvB,IAAI,CAAC,IAAI,IAAI,aAAa,CAAC,MAAM,EAAE;QAC/B,IAAI;YACA,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;YAC7D,IAAI,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC;YACjC,MAAM,GAAG,IAAI,CAAC,EAAY,CAAC;YAC3B,OAAO,CAAC,MAAM,CAAC,IAAI,CACf,WAAW,IAAI,CAAC,IAAI,MAAM,MAAM,gGAAgG,CACnI,CAAC;SACL;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;YACrD,OAAO;gBACH,KAAK,EAAE,CAAC,CAAC,OAAO;gBAChB,OAAO,EAAE,KAAK;aACjB,CAAC;SACL;KACJ;IAED,oDAAoD;IACpD,IAAI,CAAC,IAAI,EAAE;QACP,OAAO,CAAC,MAAM,CAAC,KAAK,CAChB,iEAAiE,CACpE,CAAC;QACF,OAAO;YACH,KAAK,EAAE,iEAAiE;YACxE,OAAO,EAAE,KAAK;SACjB,CAAC;KACL;IAED,0CAA0C;IAC1C,IAAI;QACA,OAAO,CAAC,MAAM,CAAC,IAAI,CACf,+BAA+B,aAAa,CAAC,aAAa,CAAC,UAAU,EAAE,CAC1E,CAAC;QAEF,IAAI,MAAM,CAAA;QAEV,IAAI,aAAa,CAAC,aAAa,CAAC,aAAa,EAAE;YAC3C,OAAO,CAAC,GAAG,CACP,iCAAiC,aAAa,CAAC,aAAa,CAAC,aAAa,EAAE,CAC/E,CAAC;YACF,MAAM,mCAAQ,MAAM,CAAC,aAAa,KAAE,KAAK,EAAE,aAAa,CAAC,aAAa,CAAC,aAAa,GAAG,CAAC;SAC3F;QAED,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,MAAM,CAChC,MAAM,EACN,aAAa,CAAC,aAAa,CAAC,UAAU,EACtC,MAAM,CACT,CAAC;QACF,OAAO,CAAC,MAAM,CAAC,IAAI,CACf,yCAAyC,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,CACrE,CAAC;QACF,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;KAC5B;IAAC,OAAO,CAAC,EAAE;QACR,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1D,OAAO;YACH,KAAK,EAAE,CAAC,CAAC,OAAO;YAChB,OAAO,EAAE,KAAK;SACjB,CAAC;KACL;AACL,CAAC,CAAA,CACJ,CAAC","sourcesContent":["import {\n    BuilderContext,\n    BuilderOutput,\n    createBuilder,\n} from \"@angular-devkit/architect\";\nimport { json } from \"@angular-devkit/core\";\nimport { Schema } from \"./schema\";\nconst NetlifyAPI = require(\"netlify\");\n\nexport default createBuilder(\n    async (\n        builderConfig: Schema,\n        context: BuilderContext\n    ): Promise<BuilderOutput> => {\n        context.reportStatus(`Executing deploy...`);\n        context.logger.info(`Executing netlify deploy command ...... `);\n\n        console.log('coucou', builderConfig)\n\n        if (builderConfig.noBuild) {\n            context.logger.info(`üì¶ Skipping build`);\n        } else {\n            const configuration = builderConfig.configuration || \"production\";\n\n            const withDeps = {\n                ...{ withDeps: builderConfig.withDeps },\n            };\n\n            let overrides: any = {\n                // this is an example how to override the workspace set of options\n                ...(builderConfig.baseHref && {\n                    baseHref: builderConfig.baseHref,\n                }),\n            };\n\n            if (builderConfig.withDeps) {\n                overrides = {\n                    ...(builderConfig.baseHref && {\n                        baseHref: builderConfig.baseHref,\n                    }),\n                    withDeps: builderConfig.withDeps,\n                };\n            }\n\n            if (!context.target) {\n                throw new Error(\n                    \"Cannot build the application without a target\"\n                );\n            }\n\n            const baseHref = builderConfig.baseHref\n                ? `Your base-href: \"${builderConfig.baseHref}`\n                : \"\";\n            const buildTarget = builderConfig.buildTarget\n                ? builderConfig.buildTarget\n                : \"build\";\n            context.logger.info(\n                `üì¶ Building \"${context.target.project}\". Configuration: \"${configuration}\". Build Command: ${buildTarget}. ${baseHref}`\n            );\n\n            const build = await context.scheduleTarget(\n                {\n                    target: buildTarget,\n                    project: context.target.project || \"\",\n                    configuration,\n                },\n                overrides as json.JsonObject\n            );\n\n            const buildResult = await build.result;\n\n            if (buildResult.success !== true) {\n                context.logger.error(`‚ùå Application build failed`);\n                return {\n                    error: `‚ùå Application build failed`,\n                    success: false,\n                };\n            }\n\n            context.logger.info(`‚úî Build Completed`);\n        }\n\n        const netlifyToken =\n            process.env.NETLIFY_TOKEN || builderConfig.netlifyToken;\n        if (netlifyToken === \"\" || netlifyToken === undefined) {\n            context.logger.error(\"üö® Netlify Token not found !\");\n            return { success: false };\n        }\n\n        let siteId = process.env.NETLIFY_API_ID || builderConfig.siteId;\n        if (siteId === \"\" || siteId === undefined) {\n            // site id is needed if the create option is false\n            if (builderConfig.create === false) {\n                context.logger.error(\"üö® API ID (Site ID) not found !\");\n                return { success: false };\n            }\n        }\n\n        const client = new NetlifyAPI(netlifyToken, {\n            userAgent: \"netlify/js-client\",\n            scheme: \"https\",\n            host: \"api.netlify.com\",\n            pathPrefix: \"/api/v1\",\n            globalParams: {},\n        });\n\n        // let check if the site exists\n        let site;\n        try {\n            // only when the site id is set\n            if (siteId) {\n                site = await client.getSite({ site_id: siteId });\n            }\n        } catch (e) {\n            switch (e.status) {\n                case 404:\n                    context.logger.error(`‚ùå Site \"${siteId}\" : Not found`);\n                    // if the create is false - just return the error\n                    if (builderConfig.create !== true) {\n                        return {\n                            success: false,\n                        };\n                    }\n                    break;\n                case 401:\n                    context.logger.fatal(\"üö® Netlify: Unauthorized Token\");\n                    return {\n                        success: false,\n                    };\n                default:\n                    // for all other errors\n                    return {\n                        error: e.message,\n                        success: false,\n                    };\n            }\n        }\n\n        // lets create the site\n        if (!site && builderConfig.create) {\n            try {\n                context.logger.info(`Creating new site for the application`);\n                site = await client.createSite();\n                siteId = site.id as string;\n                context.logger.info(\n                    `‚úî Site \"${site.name}\" (${siteId}) created. Please update the angular.json so on the next run we can re-deploy on the same site`\n                );\n            } catch (e) {\n                context.logger.error(\"üö® Unable to create the site\");\n                return {\n                    error: e.message,\n                    success: false,\n                };\n            }\n        }\n\n        // if we still don't have the site return with error\n        if (!site) {\n            context.logger.error(\n                \"üö® Unable to deploy as we don't have any context about the site\"\n            );\n            return {\n                error: \"üö® Unable to deploy as we don't have any context about the site\",\n                success: false,\n            };\n        }\n\n        // lets deploy the application to the site\n        try {\n            context.logger.info(\n                `Deploying project from üìÇ ./${builderConfig.netlifyConfig.outputPath}`\n            );\n\n            let config\n\n            if (builderConfig.netlifyConfig.functionsPath) {\n                console.log(\n                    `Deploying functions from üìÇ ./${builderConfig.netlifyConfig.functionsPath}`\n                );\n                config = { ...config.netlifyConfig, fnDir: builderConfig.netlifyConfig.functionsPath  };\n            }\n\n            const response = await client.deploy(\n                siteId,\n                builderConfig.netlifyConfig.outputPath,\n                config\n            );\n            context.logger.info(\n                `‚úî Your updated site üï∏  is running at ${response.deploy.ssl_url}`\n            );\n            return { success: true };\n        } catch (e) {\n            context.logger.error(`‚ùå Deployment failed: ${e.message}`);\n            return {\n                error: e.message,\n                success: false,\n            };\n        }\n    }\n);\n"]}