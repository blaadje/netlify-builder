{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAAA,2DAAsG;AACtG,+CAAiE;AAGjE,SAAS,YAAY,CAAC,IAAU;IAC5B,MAAM,aAAa,GAAG,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;IAC1D,MAAM,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAExD,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE;QACxB,MAAM,IAAI,gCAAmB,CAAC,6BAA6B,CAAC,CAAC;KAChE;IAED,MAAM,OAAO,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC;IACxC,IAAI,SAAoB,CAAC;IAEzB,IAAI;QACA,SAAS,GAAI,gBAAS,CAAC,OAAO,EAAE,oBAAa,CAAC,KAAK,CAAqB,CAAC;KAC5E;IAAC,OAAO,CAAC,EAAE;QACR,MAAM,IAAI,gCAAmB,CAAC,iCAAiC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;KAC/E;IAED,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;AAC/B,CAAC;AAQD,SAAgB,cAAc,CAAC,OAAqB;IAChD,OAAO,CAAC,IAAU,EAAE,QAA0B,EAAE,EAAE;QAC9C,4BAA4B;QAC5B,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;QAE9D,uBAAuB;QACvB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YAClB,IAAI,SAAS,CAAC,cAAc,EAAE;gBAC1B,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC,cAAc,CAAC;aAC9C;iBAAM;gBACH,MAAM,IAAI,gCAAmB,CACzB,qEAAqE,CACxE,CAAC;aACL;SACJ;QAED,0BAA0B;QAC1B,MAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACpD,IAAI,CAAC,OAAO,EAAE;YACV,MAAM,IAAI,gCAAmB,CACzB,gEAAgE,CACnE,CAAC;SACL;QAED,gCAAgC;QAChC,IAAI,OAAO,CAAC,WAAW,KAAK,aAAa,EAAE;YACvC,MAAM,IAAI,gCAAmB,CACzB,0EAA0E,CAC7E,CAAC;SACL;QAED,wCAAwC;QACxC,IACI,CAAC,OAAO,CAAC,SAAS;YAClB,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK;YACxB,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO;YAChC,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,EAC7C;YACE,MAAM,IAAI,gCAAmB,CACzB,2FAA2F,OAAO,CAAC,OAAO,mBAAmB,CAChI,CAAC;SACL;QAED,sCAAsC;QACtC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG;YAC1B,SAAS,EAAE,gCAAgC;YAC3C,SAAS,EAAE;gBACP,YAAY,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU;gBACxD,cAAc,EAAE,OAAO,CAAC,YAAY;gBACpC,QAAQ,EAAE,OAAO,CAAC,MAAM;aAC3B;SACJ,CAAA;QAED,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC;AACN,CAAC;AAxDD,wCAwDC;AAED,mBAAyB,OAAqB;IAC1C,OAAO,kBAAK,CAAC;QACT,cAAc,CAAC,OAAO,CAAC;KAC1B,CAAC,CAAC;AACP,CAAC;AAJD,4BAIC","sourcesContent":["import { Rule, SchematicContext, SchematicsException, Tree, chain } from '@angular-devkit/schematics';\nimport {  JsonParseMode, parseJson } from '@angular-devkit/core';\nimport { Workspace } from '../interfaces';\n\nfunction getWorkspace(host: Tree): { path: string; workspace: Workspace } {\n    const possibleFiles = ['/angular.json', './angular.json'];\n    const path = possibleFiles.find(path => host.exists(path));\n    const configBuffer = path ? host.read(path) : undefined;\n\n    if (!path || !configBuffer) {\n        throw new SchematicsException(`Could not find angular.json`);\n    }\n\n    const content = configBuffer.toString();\n    let workspace: Workspace;\n\n    try {\n        workspace = (parseJson(content, JsonParseMode.Loose) as {}) as Workspace;\n    } catch (e) {\n        throw new SchematicsException(`Could not parse angular.json: ${e.message}`);\n    }\n\n    return { path, workspace };\n}\n\ninterface NgAddOptions {\n    project?: string;\n    siteID: string;\n    netlifyToken: string;\n}\n\nexport function netlifyBuilder(options: NgAddOptions): Rule {\n    return (tree: Tree, _context: SchematicContext) => {\n        // get the workspace details\n        const { path: workspacePath, workspace } = getWorkspace(tree);\n\n        // getting project name\n        if (!options.project) {\n            if (workspace.defaultProject) {\n                options.project = workspace.defaultProject;\n            } else {\n                throw new SchematicsException(\n                    'No Angular project selected and no default project in the workspace'\n                );\n            }\n        }\n\n        // Validating project name\n        const project = workspace.projects[options.project];\n        if (!project) {\n            throw new SchematicsException(\n                'The specified Angular project is not defined in this workspace'\n            );\n        }\n\n        // Checking if it is application\n        if (project.projectType !== 'application') {\n            throw new SchematicsException(\n                `Deploy requires an Angular project type of \"application\" in angular.json`\n            );\n        }\n\n        // Getting output path from Angular.json\n        if (\n            !project.architect ||\n            !project.architect.build ||\n            !project.architect.build.options ||\n            !project.architect.build.options.outputPath\n        ) {\n            throw new SchematicsException(\n                `Cannot read the output path(architect.build.options.outputPath) of the Angular project \"${options.project}\" in angular.json`\n            );\n        }\n\n        // adding deploy statement for builder\n        project.architect['deploy'] = {\n            \"builder\": \"@netlify-builder/deploy:deploy\",\n            \"options\": {\n                \"outputPath\": project.architect.build.options.outputPath,\n                \"netlifyToken\": options.netlifyToken,\n                \"siteId\": options.siteID,\n            }\n        }\n\n        tree.overwrite(workspacePath, JSON.stringify(workspace, null, 2));\n        return tree;\n    };\n}\n\nexport default function (options: NgAddOptions): Rule {\n    return chain([\n        netlifyBuilder(options),\n    ]);\n}"]}